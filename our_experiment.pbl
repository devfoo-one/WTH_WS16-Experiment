# one test run
define DoAudioTest(number) {

    # setup audio file for test
    sound <- LoadSound("sine_100Hz.wav") # dont know how to define undefineds
    if (number ==  0) { sound <- LoadSound("test_500Hz.wav") } # test run
    if (number ==  1) { sound <- LoadSound("sine_100Hz.wav") }
    if (number ==  2) { sound <- LoadSound("sine_500Hz.wav") }
    if (number ==  3) { sound <- LoadSound("sine_900Hz.wav") }
    if (number ==  4) { sound <- LoadSound("sine_1300Hz.wav") }
    if (number ==  5) { sound <- LoadSound("sine_1700Hz.wav") }
    if (number ==  6) { sound <- LoadSound("sine_2100Hz.wav") }
    if (number ==  7) { sound <- LoadSound("sine_2500Hz.wav") }
    if (number ==  8) { sound <- LoadSound("sine_2900Hz.wav") }
    if (number ==  9) { sound <- LoadSound("sine_3300Hz.wav") }
    if (number == 10) { sound <- LoadSound("sine_3700Hz.wav") }
    if (number == 11) { sound <- LoadSound("sine_4100Hz.wav") }

    if (number == 0) {
        confirmLabel <- EasyLabel("Test run: Press A if you hear a sound", gVideoWidth / 2, gVideoHeight / 2, gWindow, 44)
        Draw()
    } else {
        confirmLabel <- EasyLabel("Test " + number + ": Press A if you hear a change in amplitude (volume)", gVideoWidth / 2, gVideoHeight / 2, gWindow, 44)
        Draw()
    }

    # start sound at frequency with base amplitude
    startTime <- GetTime()
    PlayBackground(sound)

    response <- WaitForListKeyPressWithTimeout(["a"], 30000, 1) # third param is unused

    if (response == "a") {
        endTime <- GetTime()
        PushOnEnd(gTestData, endTime - startTime)
    } else {
        # invalidate test
        # atm jndTime stays zero
    }

    Stop(sound) # forget this and pebl crashes

    Hide(confirmLabel)
    Draw()
}

# pebl prog entry point
define Start(lParameter) { # param is mandatory

    # Make initial objects needed for display.
    gWindow <- MakeWindow("grey")

    # make test data to be filled
    gTestData <- []

    # splash screen, plz tell me pebl can do better
    smiley <- MakeImage("smiley-big.png")
    AddObject(smiley, gWindow)
    Move(smiley, gVideoWidth / 2, gVideoHeight / 2 - 350)
    descriptionLabel1 <- EasyLabel("This experiment tests the users ability to notice a minor",     gVideoWidth / 2, gVideoHeight / 2 - 5*48, gWindow, 44)
    descriptionLabel2 <- EasyLabel("difference in amplitude on multiple static sine sounds.",       gVideoWidth / 2, gVideoHeight / 2 - 4*48, gWindow, 44)
    descriptionLabel3 <- EasyLabel("The user is supposed to press the button 'A'",                  gVideoWidth / 2, gVideoHeight / 2 - 2*48, gWindow, 44)
    descriptionLabel4 <- EasyLabel("once a change in amplitude is noticed. ",                       gVideoWidth / 2, gVideoHeight / 2 - 1*48, gWindow, 44)
    descriptionLabel5 <- EasyLabel("After the press of the button, the next sine sound",            gVideoWidth / 2, gVideoHeight / 2 + 0*48, gWindow, 44)
    descriptionLabel6 <- EasyLabel(" is being played, where the user again presses the button 'A'", gVideoWidth / 2, gVideoHeight / 2 + 1*48, gWindow, 44)
    descriptionLabel7 <- EasyLabel("once a change in amplitude is noticed.",                        gVideoWidth / 2, gVideoHeight / 2 + 2*48, gWindow, 44)
    descriptionLabel8 <- EasyLabel("Press any key to start the tests",                              gVideoWidth / 2, gVideoHeight / 2 + 5*48, gWindow, 44)

    Draw()
    WaitForAnyKeyPress()
    Hide(descriptionLabel1)
    Hide(descriptionLabel2)
    Hide(descriptionLabel3)
    Hide(descriptionLabel4)
    Hide(descriptionLabel5)
    Hide(descriptionLabel6)
    Hide(descriptionLabel7)
    Hide(descriptionLabel8)
    Hide(smiley) # HINT hides not yet, call draw to perform any graphical changes
    Draw()

    # perform testing test sequence
    testTest <- 0
    DoAudioTest(testTest)

    # perform main test sequence
    actualTest <- 1 # OMG program language starting at 1
    while (actualTest < 11) {
        DoAudioTest(actualTest)
        actualTest <- actualTest + 1
    }

    # save received data
    RandomizeTimer()
    fileBuster <- RandomDiscrete(1000000)
    dataFile <- FileOpenWrite(fileBuster + "data.dat")
    FilePrint(dataFile, "test row")
    loop(data, gTestData) {
        FilePrint(dataFile, data)
    }
    FilePrint(dataFile, "test row end")
    FileClose(dataFile)


    # epilog
    goodbyeLabel <- EasyLabel("Thanks for participation", gVideoWidth / 2, gVideoHeight / 2, gWindow, 44)
    Draw()
    Wait(3000)
}
